	Node()

next_=nullptr; //node

	Node(T& an_item)
an_item=0;

	Node(const T& an_item, Node<T>* next_node)
item_=an_iten;
next_=next_node;

	void SetItem(const T& an_item)
item_=an_item
	
	void setNext(Node<T>* next_node)
next->next_node;

	
	LinkedBag() O(1)
item_count_=0;
head_ptr_=nullptr;

	~inkedBag() O(n) worst case due to memory

	add() O(1)
check if lsit not emppty !isempty()
make new node 
new node->setItem(new_entry)
newnode point to head newnode->SetNext(head_ptr)
head=newnode
count++;
	
	std::vector<F> toVector() const O(n)
make vector 	std::vector<T> bagcontents
make new node pointing at head
newnode=head;  	Node<T>* cur_ptr=head_ptr_;
while new node not last in list
newnode_->getItem() pushes to vector
new node points to next node
new_node=new_node->getNext()

	getPointerTo(const T& an_entry) const O(n)
make new node
node point to head
newnode=head
while new node not in last list loop
newnode_->getItem()
check if equals to an_entry
return the newnode of the item

	
//help with remove, clear

	bool LinkedBag<T>::remove(const T& an_entry)  O(n)
Node<T>* entry = getPointerTo(an_entry); gives where node is for an_entry
while entry not at last
entry set item of head get item      	entry_ptr->setItem(head_ptr_->getItem());
make new node Delete equals to head       Node<T>* node_delete=head_ptr_;
head points to next node 			head_ptr_=head_ptr_->getNext();
node delete setNext(nullptr)			node_delete->setNext(nullPtr);
delete nodedelete					delete node_delete;
nodedelete=nullptr				node_delete=nullptr;
count--;


	void clear()  O(n)
make new delete node point to head		Node<T>* node_delete=head_ptr_;
whiel head not last
head gerts next pointer			      head_ptr_=head_ptr_->getNext();
new delete node setNext(nullptr)		node_delete->SetNext(nullptr);
delete node delete				delete node_delete;
node delete=headptr				node_delete=head_ptr_;
itemcount=0

	void swap(vector<string>& x, vector<string>& y)
{
 vector<string> temp = std::move(x);
 x = std::move(y);
 y = std::move(temp);
}

	bool List<T>::insert(size_t position, const T& new_element){

make new node containing new element 	Node<T>* newNode=new Node<T>(new_element)
get node location of position			Node<T>* pos_ptr=getPointerTo(position)

//if first is the only one in list
    if (first==nullptr){
       new node setNext(nullptr) only one in list
	 new node setPrevious(nullptr) only one in list
	 first->setPrevious(newNode)
	 first=newnode
    }

    //if po_ptr is first node
    else if(pos_ptr=first){
      new node SetNext(first)
	new node SetPrevious(nullptr)
	first->setPrevious(newnide)
	first=new node
    }

    else if(pos_ptr=nullptr){
       new node_>setNext(nullptr) last one in list
	 new node->setPrevious(last)
	 last->setNext(newnode)
	 last=new node;
    }

    else{
	 newnode=setNext(pos_ptr)
	 newnode->setPrevious(pos_ptr_>getPrevoius())
	 posptr->getPrevious()->setNext(newnode)
	 posptr->setPrevious(newnode)
    }

bool List <T>::remove(size_t position)
	
make node pos_ptr equal to getPointerTo(position)
if (pos_ptr == first_) { 	//if pos node equal to first node
        // Remove first node
        first_ = pos_ptr -> getNext();	//first equals to pos next node
        first_ -> setPrevious(nullptr);	//first setprevoud nullptr becuase first node
        // Return node to the system	
        pos_ptr -> setNext(nullptr);	//pos ptr setnext nullptr deleting node
        delete pos_ptr;			//delete node
        pos_ptr = nullptr;		//pospotr=nullptr
      }
else if (pos_ptr == last_) {
        //remove last_ node
        last_ = pos_ptr -> getPrevious();
        last_ -> setNext(nullptr);
        // Return node to the system
        pos_ptr -> setPrevious(nullptr);
        delete pos_ptr;
        pos_ptr = nullptr;
} else {
        //Remove from the middle
        pos_ptr -> getPrevious() -> setNext(pos_ptr -> getNext());
        pos_ptr -> getNext() -> setPrevious(pos_ptr -> getPrevious());
        // Return node to the system
        pos_ptr -> setNext(nullptr);
        pos_ptr -> setPrevious(nullptr);
        delete pos_ptr;
        pos_ptr = nullptr;

virtual void ConvertToPixelArrat() const==0 polymprlhism pure virtual function


	linear search O(n)
for loop see where item is

	binary search O(log(n))
two variables low=0, high=last item in vector
loop whilie(low<high)
middle variable= (high+low)/2
if item >middle place
increment low=mid+1
else item <middle place
decrement high=mid-1
return mid

	Selection sort void selectionSort(const std::vector<Comparable>& the_array)
int size = the_array.size();
for (int first = 0; first < size; first++)
int smallest_index = findIndexOfSmallest(the_array, first, size);
std::swap(the_array[smallest_index], the_array[first]);	


	//Bubble Sort run time is O(n2) Worst Case. O(n) best Case
	void bubbleSort(const std::vector<Comparable>& the_array)
	
int size = the_array.size();
bool swapped = true; // Assume unsorted
int pass = 1;
while (swapped && (pass < size))
{
swapped = false;
for (int index = 0; index < size - pass; index++)
{
if (the_array[index] > the_array[index+1])
{
std::swap(the_array[index], the_array[index+1]); //swap
swapped = true; // indicates array not yet sorted
}// end if
} // end for
pass++;
} // end while
} // end bubbleSort


	Insertion sort O(n2) Worst Case. O(n) best case
void insertionSort(const std::vector<Comparable>& the_array)
{
int size = the_array.size();
for (int unsorted = 1; unsorted < size; unsorted++)
{
int current = unsorted; //the index of the item currently being inserted
while ((current > 0) && (the_array[current - 1] > the_array[current]))
{
std::swap(the_array[current], the_array[current - 1]); // swap
current--;
} // end while
} // end for
} // end insertionSort


	void recursiveReverse(string &str)
make stack
loop through string
push elements itno stack
loop through string
elemnts equal to top of stack
pop elements

	Stack
for(char ch : st)
{
if ch is an open parenthesis character
push it on the stack
else if ch is a close parenthesis character
if it matches the top of the stack
pop the stack
else
return unbalanced
// else it is not a parenthesis
}
if stack is empty
return balanced
else
return unbalanced

	LinkedStack<ItemType>::~LinkedStack()
while not empty
pop stack

	 LinkedStack<ItemType>::isEmpty()
return topPtr==nullptr

	LinkedStack<ItemType>::push(const ItemType& newItem)
make new node equal to node with new Itemtype, topPtr 	Node <T>*newnode= new node<T>(newItem,TopPtr) 
topPointer of stack equals to node			topPointer=newnode
new node becomes nullptr				newnode=nullptr

	LinkedStack<ItemType>::pop()
if stack not empty			!isEmpty()
make delete node equal to topNode	Node<T>* deleteNode=topNode
topNode points to next Node		topNode=topNode->getNext()
Delete Node points to nullptr		deleteNode->getNext(nullptr)
delete node				delete Node
node = nulllptr				Node=nullptr


	Queue  bool LinkedQueue<ItemType>::enqueue(const ItemType& newEntry)
make new node have newEntry		Node<T>* newNode=new Node<T>(newEntry)
if not empty queue			!isEmpty()
frontPointer=newNode			frontPtr=newNode
else					Else
backPointer->setNext(newnodePtr)	backPointer_>setNext(newNodePtr)
backPointer=newNodePtr			backPointer=newNodePtr

	bool LinkedQueue<ItemType>::dequeue()
if not empty				!isEmpty()
delete node equals frotn Node		Node<T>* NodeDelete=front Node
front node gets next node		frontNode->getNext()
node delete points to nullptr		NodeDelete_>setNext(Nullptr)
delete node delete			delete NodeDelete
node delete=nullptr			NodeDelete=nullptr


	Trees	Search(bs_tree, item)   Worst Case O(H)
if(bs_tree is empty)
item not found
else if item ==root
return root
else if item<root
search(T L, item)
else
Search(T R, item)

	add(bs_tree, item) Worst Case O(H)
if bs_tree is empty
item=root
else if item<root
add(T L, item)
else
add(T R, item)

	inorder(bs_tree) Worst Case O(H)
if(bs_tree not empty)
inorder(T L)		inorder(root->left)
visit Root
inOrder(T R)		inoreder(root->right)
		
	PreOrder(bs_tree)
Visit Root Tree
PreOreder(T L)		perOrder(root->left)
PreOreder(T R)		preOrder(root->right)

	PostOrder(bs_tree)
PostOrder(T L)		PostOrder(root->left)
PostOrder(T R)		PostOrder(root->right)
Visit Root Node

	Search Operation of BST
if Root=NULL
	return NULL
if number==root->data
	return root->data
if number < root->data
	return search(root->left)
if number > root->data
	return search(root->right)

	Insert Operation of BST
if Root=NULL
	return CreateNode(data)
if(data < node->data)
	node->left = insert(node->left,data)
else if(data > node->data)
	node->right = insert(node->right,data)
return node

	Deleting node three ways
	Struct Node* deleteNode(struct Node *root, int key)
return root if tree is empty		if(root=NULL)
//find Node to be deleted
if data < root->data
root->left = deleteNode(root->left,data)
else if key > root->key
root->right = deleteNode(root->right,data)

	Else if node had 1 child or no child
if(root->left==NULL)
struct node *temp=root->right
free(root)
return temp
else if root->right == NULL
struct node *temp= root->left
free(root)
return temp

	if node has 2 children inOrder succession the biggest node after teh current one
struct node *temp = minValueNode(root->right);

// Place the inorder successor in position of the node to be deleted
root->key = temp->key;
// Delete the inorder successor
root->right = deleteNode(root->right, temp->key)
Delete Node

	BST<T>::BST(const BST<T>& tree) Copy Constructor
rootprt = copyTree(tree.root_prt)

	BST<T>::copyTree(const std::shared_ptr<BinaryNode<T>> old_tree_root_ptr) const
make new shared Pointer			std::shared_ptr<BinaryNode<T>> new_tree_ptr
if old tree root not null		if(oldtree !=nullptr)
copy node for new tree			
new_tree=std::make_shared<BinaryNode<T>>(OldTreeRoot->getItem(), nullptr, nullptr)
new_tree->setLeftChildPtr(copyTree(oldTree->getLeftChild()))
new_tree->setRightChildPrt(copyTree(oldTree->getRightChild()))
return tree

	BST<T>::BST(const BST<T>&& tree) move constructor
make rootpointer = tree pointer		root_prt=tree.rootPrt
tree pointer.reset()

	BST<T>::destroyTree(std::shared_ptr<BinaryNode<T>> sub_tree_ptr)
if subtree not nullpointer
destroyTree(subTree_>getLeftChildPtr())
destroyTree(subTreeptr->getRighCHildPrt())
subtree.reset()  // same as sub_tree_ptr = nullptr for smart pointers

	void BST<T>::clear()
call destroyTree(root_ptr)

	 BST<T>::getHeight() const
return getHeightHelper(rootPrt)

	int BST<T>::getHeightHelper(std::shared_ptr<BinaryNode<T>> sub_tree_ptr) const
if subtree nullptr
return 0
else 
1 + std::max(getHeightHelper(subtreePtr->getLeftChild()), getHeightHelper(subtreePtr->getRightChild()))
	
	void BST<T>::add(const T& new_item)
auto newnode = std::make_shared<BinaryNode<T>>(new_item)
placeNode(rootptr, newnodePtr)
	
	auto BST<T>::placeNode(std::shared_ptr<BinaryNode<T>> subtree_ptr,std::shared_ptr<BinaryNode<T>> new_node_ptr)	
if subtree nullptr return new node
else
if subtreeptr->getItem() > newNodeptr->getItem()
subtreePtr->setLeftChildPtr(PlaceNode(subTree->getLeftChildPtr(), newNodePtr))
else 
subtree_ptr->setRightChildPtr(placeNode(subtree_ptr->getRightChildPtr(),new_node_ptr));
	
	bool BST<T>::remove(const T& target)
root_ptr_ = removeValue(root_ptr_, target, is_successful);
	
	auto BST<T>::removeValue(std::shared_ptr<BinaryNode<T>>subtree_ptr, const T target, bool& success)
if (subtree_ptr == nullptr)
{
// Not found here
success = false;
return subtree_ptr;
}
if (subtree_ptr->getItem() == target)
{
// Item is in the root of this subtree
subtree_ptr = removeNode(subtree_ptr);
success = true;
return subtree_ptr;
}
else
{
if (subtree_ptr->getItem() > target)
{
// Search the left subtree
subtree_ptr->setLeftChildPtr(removeValue(subtree_ptr->getLeftChildPtr(), target, success));
}
else
{
// Search the right subtree
subtree_ptr->setRightChildPtr(removeValue(subtree_ptr->getRightChildPtr(), target, success));
}
return subtree_ptr;
} // end if
} // end removeValue
	
	auto BST<T>::removeNode(std::shared_ptr<BinaryNode<T>> node_ptr)
if nodeptr is leaf
nodeptr.reset()
return node
if node has 1 right child
nodeptr->getLeftChild()==nullptr
return nodeptr->getRightChildPtr

if node has 1 left child
nodeptr->getRightChild()==nullptr
return nodeptr->getLeftChildPtr

if node has 2 chidren
T newnode // new item
nodeptr->setRightChildPtr(removeLeftMostNode(nodePtr->getRightChildPtr(),newnode))
nodeptr->setItem(newnode)	
return nodeptr
	
	auto BST<T>::removeLeftmostNode(std::shared_ptr<BinaryNode<T>>nodePtr, T& inorderSuccessor)
if nodeptr->getLeftChildPtr()==nullptr
inorderSuccessor-nodeptr->getitem()
return removeNode(nodePtr)
else
nodePtr->setLeftChildPtr(removeLeftmostNode(nodePtr->getLeftChildptr(), inorderSuccessor))
return nodePtr
	
	void BST<T>::inorder(Visitor<T>& visit,
std::shared_ptr<BinaryNode<T>> tree_ptr) const
{
if (tree_ptr != nullptr)
{
inorder(visit, tree_ptr->getLeftChildPtr());
T the_item = tree_ptr->getItem();
visit(the_item);
inorder(visit, tree_ptr->getRightChildPtr());
} // end if
} // end inorder
	
	shared pointers
shared_ptr
std::shared_ptr<Song> song_ptr1; //declaration only automatically set to nullptr
auto song_ptr2=std::make_shared<Song>();// equivalent to Song* ptr = new Song()
cout<<songprt2->getTitle()

	weak pointers
weak_prt
auto shared_prt=std::make_shared<Song>()
std::weak_prt<Song> weakSong=shared_prt
auto weaksong1=weaksong

	uniqueprt
auto songprt = makeunique<Song>();
std::uniquePrt<Song> anotherSong
anotherSong=songprt
	
	BinaryNode(const T& an_item, std::shared_ptr<BinaryNode<T>> left,std::shared_ptr<BinaryNode<T>> right) //constructor
left child equals to left shared ptr
right child equals to right shared ptr

	BinaryNode SetLeftChild(std::shared_ptr<BinaryNode<T> left_ptr)
left child equals leftptr

	DestroyTree(std::shared_ptr<BinaryNode<T> subtreeptr)
if subtreeptr!=nullptr
destroyTree(subtreeptr->getLeftChildPtr())     calling method recursive to get rid of left child
destroyTree(subtreeptr->getRightChildPtr()     calling method recursive to get rid of right child
subtreeptr.reset()			       nullpointer for subtreeptr
	
	clear() calls DestroyTree

	getHeight() const
call getHeightHelper(rootPtr)

	getHeightHelper(std::shared_ptr<BinaryNode<T>> sub_tree_ptr)
if subtreeptr nullptr return 0
else
return 1+std::max(getHeightHelper(sub_tree_ptr->getLeftChild()), getHeightHelper(sub_tree_ptr->getRightChildPtr()))

	placeNode(std::shared_ptr<BinaryNode<T>> subtree_ptr, std::shared_ptr<BinaryNode<T>> new_node_ptr)
if subtree nullptr 
return newnode
else
if subtree getItem()  > newnode ->getItem()
subtree->setLeftChild(placeNode(subtree->getLeftChildPtr()), newnodeptr)
else
subtree->setRightChild(placeNode(subtree_>GetRightCHildPtr()), newNodeptr)
return subtreeptr

	removeValue(const T& target)
if subtree->getItem() ==target
subtreeptr=removeNode(subtreeptr) //found item remove it
else
if subtrr->getItem > target //search left subtree
subtree->setLeftChild(removeValue(subtreeptr->getLeftCHildpTr(), target))
else
subtreeptr->setRightCHildPtr(removeValue(subtreeptr->getRightCHildPtr(), target))

	removeNode(std::shared_ptr<BinaryNode<T>> node_ptr)
if node->isLeaf() //Node is a leaf, its deleted
nodeptr.reset()
else if Node->GetLeftChildPtr==nullptr  //if has right child
retrn nodeptr->getRightChildptr()
else if Node->GEtRightChildPtr == nullptr
return nodeptr->getLeftChild()
else //had 2 childs
T newNode
nodeptr->setRightCHild(removeLeftMostNode(nodeptr-.getRightCHildPtr()),newnodevalue)
nodeptr->setItem(newnodevalue)
return node

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
































































